head
    title hello
    style.
        body {
            font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        }

        .graph .axis {
            stroke-width: 1;
        }

        .graph .axis .tick line {
            stroke: black;
        }

        .graph .axis .tick text {
            fill: black;
            font-size: 0.7em;
        }

        .graph .axis .domain {
            fill: none;
            stroke: black;
        }

        .graph .group {
            fill: none;
            stroke: black;
            stroke-width: 1.5;
        }

body
    .graph

    script(src="http://code.jquery.com/jquery-1.11.3.min.js")
    script(src="http://d3js.org/d3.v3.min.js")
    
    script.
        var limit = 60 * 1,
            duration = #{duration},
            now = new Date(Date.now() - duration)

        var width = #{size.width},
            height = #{size.height};

        //- var groups = {
            var group = {
                value: 0,
                color: '#{color}',
                data: d3.range(limit).map(function() {
                    return 0
                })
            }
        //- }

        var x = d3.time.scale()
            .domain([now - (limit - 2), now - duration])
            .range([0, width])

        var y = d3.scale.linear()
            .domain([0, 100])
            .range([height, 0])

        var line = d3.svg.line()
            .interpolate('linear')
            .x(function(d, i) {
                return x(now - (limit - 1 - i) * duration)
            })
            .y(function(d) {
                return y(d)
            })

        var svg = d3.select('.graph').append('svg')
            .attr('class', 'chart')
            .attr('width', width)
            .attr('height', height + 50)

        var axis = svg.append('g')
            .attr('class', 'x axis')
            .attr('transform', 'translate(0,' + height + ')')
            .call(x.axis = d3.svg.axis().scale(x).orient('bottom'))

        var paths = svg.append('g')

        //- for (var name in groups) {
            //- var group = groups[name]
            group.path = paths.append('path')
                .data([group.data])
                .attr('class', name + ' group')
                .style('stroke', group.color)
        //- }

        // var timer = setInterval(function(){
        //     tick(20 + Math.random() * 100);
        //     // $.get("details", function(data){
        //     //   var json = $.parseJSON(data);
        //     //   var content = json["with"][0]["content"];
        //     //   myChart.addData([content["memory"]["total_alloc"]], content["timestamp"]);

        //     //   //make graph move if more than 20 points
        //     //   if(count > 20){
        //     //     myChart.removeData();
        //     //   }
        //     //   if(count <= 20){
        //     //     count++;
        //     //   }
        //     // });
        // }, duration);


        function tick(data) {


            now = new Date()

            // Add new values
            //- for (var name in groups) {
                //- var group = groups[name]
                //group.data.push(group.value) // Real values arrive at irregular intervals
                group.data.push(data['output'])
                group.path.attr('d', line)
            //- }

            // Shift domain
            x.domain([now - (limit - 2) * duration, now - duration])

            // Slide x-axis left
            axis.transition()
                .duration(duration)
                .ease('linear')
                .call(x.axis)

            // var newdata = 20 + Math.random() * 100;

            // Slide paths left
            paths.attr('transform', null)
                .transition()
                .duration(duration)
                .ease('linear')
                .attr('transform', 'translate(' + x(now - (limit - 1) * duration) + ')')
                .each('end', function(){
                    $.get('#{url}', function(json){
                        var data = json.with[0].content;
                        // console.log(data);
                        tick(data);
                    });
                });

            // Remove oldest data point from each group
            //- for (var name in groups) {
                //- var group = groups[name]
                group.data.shift()
            //- }
        }

        tick({
            output: 0,
            target: 0,
            current: 0
        });

